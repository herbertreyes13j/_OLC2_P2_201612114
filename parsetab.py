
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftcomarightasignaporasignadivasignamodasignamasasignamenosasignashifizqtasignashiftderasignaandbasignaorbasignaxorbasingarightcondicionalleftorleftandleftorbleftxorbleftandbleftigualdiferenteleftmayormenormayorimenorileftshiftdershiftizqleftmasmenosleftpordivisionmodulorightt_sizeofincrementodecrementodireccionpunteronotnotbleftpar1par2cor1cor2flechapuntoand andb andbasigna asigna char coma condicional cor1 cor2 decimal decremento diferente direccion divasigna division entero flecha iden igual incremento mas masasigna mayor mayori menor menori menos menosasigna modasigna modulo not notb or orb orbasigna par1 par2 por porasigna puntero punto pyc shifizqtasigna shiftder shiftderasigna shiftizq string t_auto t_break t_case t_char t_const t_continue t_default t_do t_double t_else t_enum t_extern t_float t_for t_goto t_if t_int t_printf t_register t_return t_scanf t_sizeof t_struct t_switch t_void t_while xorb xorbasingaS         : Sentencias_GS         : Sentencias_G : Sentencias_G Sentencia_GSentencias_G : Sentencia_GSentencia_G : Declaracion Declaracion : Tipos L_Dec pycL_Dec : L_Dec coma DecL_Dec : DecDec : idenDec : iden asignaTipos : t_charTipos : t_intTipos : t_doubleTipos : t_floatDimen : Dimen cor1 cor1Dimen : cor1 cor2'
    
_lr_action_items = {'$end':([0,1,2,3,4,10,14,],[-2,0,-1,-4,-5,-3,-6,]),'t_char':([0,2,3,4,10,14,],[6,6,-4,-5,-3,-6,]),'t_int':([0,2,3,4,10,14,],[7,7,-4,-5,-3,-6,]),'t_double':([0,2,3,4,10,14,],[8,8,-4,-5,-3,-6,]),'t_float':([0,2,3,4,10,14,],[9,9,-4,-5,-3,-6,]),'iden':([5,6,7,8,9,15,],[13,-11,-12,-13,-14,13,]),'pyc':([11,12,13,16,17,],[14,-8,-9,-10,-7,]),'coma':([11,12,13,16,17,],[15,-8,-9,-10,-7,]),'asigna':([13,],[16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'S':([0,],[1,]),'Sentencias_G':([0,],[2,]),'Sentencia_G':([0,2,],[3,10,]),'Declaracion':([0,2,],[4,4,]),'Tipos':([0,2,],[5,5,]),'L_Dec':([5,],[11,]),'Dec':([5,15,],[12,17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> S","S'",1,None,None,None),
  ('S -> Sentencias_G','S',1,'p_inicio','Gramatica.py',240),
  ('S -> <empty>','S',0,'p_inicio2','Gramatica.py',244),
  ('Sentencias_G -> Sentencias_G Sentencia_G','Sentencias_G',2,'p_Sentencias_G_Sentencia_G','Gramatica.py',248),
  ('Sentencias_G -> Sentencia_G','Sentencias_G',1,'p_Sentencias_G','Gramatica.py',253),
  ('Sentencia_G -> Declaracion','Sentencia_G',1,'p_Sentencia_G','Gramatica.py',257),
  ('Declaracion -> Tipos L_Dec pyc','Declaracion',3,'p_DECLARACION','Gramatica.py',261),
  ('L_Dec -> L_Dec coma Dec','L_Dec',3,'p_L_DEC','Gramatica.py',266),
  ('L_Dec -> Dec','L_Dec',1,'p_L_DEC_2','Gramatica.py',270),
  ('Dec -> iden','Dec',1,'p_Dec','Gramatica.py',274),
  ('Dec -> iden asigna','Dec',2,'p_Dec2','Gramatica.py',279),
  ('Tipos -> t_char','Tipos',1,'p_Tipos1','Gramatica.py',283),
  ('Tipos -> t_int','Tipos',1,'p_Tipos2','Gramatica.py',287),
  ('Tipos -> t_double','Tipos',1,'p_Tipos3','Gramatica.py',291),
  ('Tipos -> t_float','Tipos',1,'p_Tipos4','Gramatica.py',295),
  ('Dimen -> Dimen cor1 cor1','Dimen',3,'p_dimensiones','Gramatica.py',301),
  ('Dimen -> cor1 cor2','Dimen',2,'p_dimensiones_s','Gramatica.py',305),
]
